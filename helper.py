import torch
import numpy as np
from time import time
from enum import Enum


class Joint(Enum):
    Hips=0
    Spine=1
    Spine1=2
    Spine2=3
    Spine3=4
    Neck=5
    Head=6
    RightShoulder=7
    RightArm=8
    RightForeArm=9
    RightHand=10
    LeftShoulder=11
    LeftArm=12
    LeftForeArm=13
    LeftHand=14
    RightUpLeg=15
    RightLeg=16
    RightFoot=17
    LeftUpLeg=18
    LeftLeg=19
    LeftFoot=20


class Bone(Enum):
    Head = 0
    Sternum = 1
    Pelvis = 2
    L_UpArm = 3
    R_UpArm = 4
    L_LowArm = 5
    R_LowArm = 6
    L_UpLeg = 7
    R_UpLeg = 8
    L_LowLeg = 9
    R_LowLeg = 10
    L_Foot = 11
    R_Foot = 12


class AverageMeter(object):
    """Computes and stores the average and current value"""
    def __init__(self):
        self.reset()

    def reset(self):
        self.val = 0
        self.avg = 0
        self.sum = 0
        self.count = 0

    def update(self, val, n=1):
        self.val = val
        self.sum += val * n
        self.count += n
        self.avg = self.sum / self.count


t = None
def timeit(name = ''):
    global t
    if t is None:
        print 'timer start'
        t = time()
        return
    print name,int((time()-t)*1000)
    t = time()


def Gaussian(sigma):
    if sigma == 7:
        return np.array([0.0529, 0.1197, 0.1954, 0.2301, 0.1954, 0.1197, 0.0529,
                         0.1197, 0.2709, 0.4421, 0.5205, 0.4421, 0.2709, 0.1197,
                         0.1954, 0.4421, 0.7214, 0.8494, 0.7214, 0.4421, 0.1954,
                         0.2301, 0.5205, 0.8494, 1.0000, 0.8494, 0.5205, 0.2301,
                         0.1954, 0.4421, 0.7214, 0.8494, 0.7214, 0.4421, 0.1954,
                         0.1197, 0.2709, 0.4421, 0.5205, 0.4421, 0.2709, 0.1197,
                         0.0529, 0.1197, 0.1954, 0.2301, 0.1954, 0.1197, 0.0529]).reshape(7, 7)
    elif sigma == 5:
        return np.array([0.0937, 0.2277, 0.3062, 0.2277, 0.0937,
                         0.2277, 0.5533, 0.7438, 0.5533, 0.2277,
                         0.3062, 0.7438, 1.0, 0.7438, 0.3062,
                         0.2277, 0.5533, 0.7438, 0.5533, 0.2277,
                         0.0937, 0.2277, 0.3062, 0.2277, 0.0937, ]).reshape(5, 5)
    else:
        raise Exception('Gaussian {} Not Implement'.format(sigma))


def DrawGaussian(img, pt, g_size):
    tmpSize = int((g_size - 1) / 2)
    ul = [int(np.math.floor(pt[0] - tmpSize)), int(np.math.floor(pt[1] - tmpSize))]
    br = [int(np.math.floor(pt[0] + tmpSize + 1)), int(np.math.floor(pt[1] + tmpSize + 1))]
    # print ul,br
    if ul[0] > img.shape[1] or ul[1] > img.shape[0] or br[0] < 1 or br[1] < 1:
        return img

    g = Gaussian(g_size)

    g_x = [max(0, -ul[0]), min(br[0], img.shape[1]) - max(0, ul[0]) + max(0, -ul[0])]
    g_y = [max(0, -ul[1]), min(br[1], img.shape[0]) - max(0, ul[1]) + max(0, -ul[1])]
    img_x = [max(0, ul[0]), min(br[0], img.shape[1])]
    img_y = [max(0, ul[1]), min(br[1], img.shape[0])]

    img[img_y[0]:img_y[1], img_x[0]:img_x[1]] = g[g_y[0]:g_y[1], g_x[0]:g_x[1]]
    return img


def Gaussian3D(size):
    if size == 7:
        r = np.array(
            [0.0342, 0.0639, 0.0930, 0.1053, 0.0930, 0.0639, 0.0342, 0.0639, 0.1194, 0.1737, 0.1969, 0.1737, 0.1194,
             0.0639, 0.0930, 0.1737, 0.2528, 0.2865, 0.2528, 0.1737, 0.0930, 0.1053, 0.1969, 0.2865, 0.3246, 0.2865,
             0.1969, 0.1053, 0.0930, 0.1737, 0.2528, 0.2865, 0.2528, 0.1737, 0.0930, 0.0639, 0.1194, 0.1737, 0.1969,
             0.1737, 0.1194, 0.0639, 0.0342, 0.0639, 0.0930, 0.1053, 0.0930, 0.0639, 0.0342, 0.0639, 0.1194, 0.1737,
             0.1969, 0.1737, 0.1194, 0.0639, 0.1194, 0.2231, 0.3246, 0.3678, 0.3246, 0.2231, 0.1194, 0.1737, 0.3246,
             0.4723, 0.5352, 0.4723, 0.3246, 0.1737, 0.1969, 0.3678, 0.5352, 0.6065, 0.5352, 0.3678, 0.1969, 0.1737,
             0.3246, 0.4723, 0.5352, 0.4723, 0.3246, 0.1737, 0.1194, 0.2231, 0.3246, 0.3678, 0.3246, 0.2231, 0.1194,
             0.0639, 0.1194, 0.1737, 0.1969, 0.1737, 0.1194, 0.0639, 0.0930, 0.1737, 0.2528, 0.2865, 0.2528, 0.1737,
             0.0930, 0.1737, 0.3246, 0.4723, 0.5352, 0.4723, 0.3246, 0.1737, 0.2528, 0.4723, 0.6872, 0.7788, 0.6872,
             0.4723, 0.2528, 0.2865, 0.5352, 0.7788, 0.8824, 0.7788, 0.5352, 0.2865, 0.2528, 0.4723, 0.6872, 0.7788,
             0.6872, 0.4723, 0.2528, 0.1737, 0.3246, 0.4723, 0.5352, 0.4723, 0.3246, 0.1737, 0.0930, 0.1737, 0.2528,
             0.2865, 0.2528, 0.1737, 0.0930, 0.1053, 0.1969, 0.2865, 0.3246, 0.2865, 0.1969, 0.1053, 0.1969, 0.3678,
             0.5352, 0.6065, 0.5352, 0.3678, 0.1969, 0.2865, 0.5352, 0.7788, 0.8824, 0.7788, 0.5352, 0.2865, 0.3246,
             0.6065, 0.8824, 1.0, 0.8824, 0.6065, 0.3246, 0.2865, 0.5352, 0.7788, 0.8824, 0.7788, 0.5352, 0.2865,
             0.1969, 0.3678, 0.5352, 0.6065, 0.5352, 0.3678, 0.1969, 0.1053, 0.1969, 0.2865, 0.3246, 0.2865, 0.1969,
             0.1053, 0.0930, 0.1737, 0.2528, 0.2865, 0.2528, 0.1737, 0.0930, 0.1737, 0.3246, 0.4723, 0.5352, 0.4723,
             0.3246, 0.1737, 0.2528, 0.4723, 0.6872, 0.7788, 0.6872, 0.4723, 0.2528, 0.2865, 0.5352, 0.7788, 0.8824,
             0.7788, 0.5352, 0.2865, 0.2528, 0.4723, 0.6872, 0.7788, 0.6872, 0.4723, 0.2528, 0.1737, 0.3246, 0.4723,
             0.5352, 0.4723, 0.3246, 0.1737, 0.0930, 0.1737, 0.2528, 0.2865, 0.2528, 0.1737, 0.0930, 0.0639, 0.1194,
             0.1737, 0.1969, 0.1737, 0.1194, 0.0639, 0.1194, 0.2231, 0.3246, 0.3678, 0.3246, 0.2231, 0.1194, 0.1737,
             0.3246, 0.4723, 0.5352, 0.4723, 0.3246, 0.1737, 0.1969, 0.3678, 0.5352, 0.6065, 0.5352, 0.3678, 0.1969,
             0.1737, 0.3246, 0.4723, 0.5352, 0.4723, 0.3246, 0.1737, 0.1194, 0.2231, 0.3246, 0.3678, 0.3246, 0.2231,
             0.1194, 0.0639, 0.1194, 0.1737, 0.1969, 0.1737, 0.1194, 0.0639, 0.0342, 0.0639, 0.0930, 0.1053, 0.0930,
             0.0639, 0.0342, 0.0639, 0.1194, 0.1737, 0.1969, 0.1737, 0.1194, 0.0639, 0.0930, 0.1737, 0.2528, 0.2865,
             0.2528, 0.1737, 0.0930, 0.1053, 0.1969, 0.2865, 0.3246, 0.2865, 0.1969, 0.1053, 0.0930, 0.1737, 0.2528,
             0.2865, 0.2528, 0.1737, 0.0930, 0.0639, 0.1194, 0.1737, 0.1969, 0.1737, 0.1194, 0.0639, 0.0342, 0.0639,
             0.0930, 0.1053, 0.0930, 0.0639, 0.0342],dtype=np.float32)

    elif size == 5:
        r = np.array(
            [0.0694, 0.1353, 0.1690, 0.1353, 0.0694, 0.1353, 0.2635, 0.3291, 0.2635, 0.1353, 0.1690, 0.3291, 0.4111,
             0.3291, 0.1690, 0.1353, 0.2635, 0.3291, 0.2635, 0.1353, 0.0694, 0.1353, 0.1690, 0.1353, 0.0694, 0.1353,
             0.2635, 0.3291, 0.2635, 0.1353, 0.2635, 0.5134, 0.6411, 0.5134, 0.2635, 0.3291, 0.6411, 0.8007, 0.6411,
             0.3291, 0.2635, 0.5134, 0.6411, 0.5134, 0.2635, 0.1353, 0.2635, 0.3291, 0.2635, 0.1353, 0.1690, 0.3291,
             0.4111, 0.3291, 0.1690, 0.3291, 0.6411, 0.8007, 0.6411, 0.3291, 0.4111, 0.8007, 1.0, 0.8007, 0.4111,
             0.3291, 0.6411, 0.8007, 0.6411, 0.3291, 0.1690, 0.3291, 0.4111, 0.3291, 0.1690, 0.1353, 0.2635, 0.3291,
             0.2635, 0.1353, 0.2635, 0.5134, 0.6411, 0.5134, 0.2635, 0.3291, 0.6411, 0.8007, 0.6411, 0.3291, 0.2635,
             0.5134, 0.6411, 0.5134, 0.2635, 0.1353, 0.2635, 0.3291, 0.2635, 0.1353, 0.0694, 0.1353, 0.1690, 0.1353,
             0.0694, 0.1353, 0.2635, 0.3291, 0.2635, 0.1353, 0.1690, 0.3291, 0.4111, 0.3291, 0.1690, 0.1353, 0.2635,
             0.3291, 0.2635, 0.1353, 0.0694, 0.1353, 0.1690, 0.1353, 0.0694],dtype=np.float32)
    else:
        raise Exception('Gaussian {} Not Implement'.format(size))
    return r.reshape(size, size, size)


def DrawGaussian3D(size, pt, g_size):
    tmpSize = int((g_size - 1) / 2)
    pt = np.array(pt)
    min_p = np.floor(pt - tmpSize).astype(np.int32)
    max_p = np.floor(pt + tmpSize).astype(np.int32) + 1
    if pt[0] < 0 or pt[0] >= size or pt[1] < 0 or pt[1] >= size or pt[2] < 0 or pt[2] >= size:
        return None
    g = Gaussian3D(g_size)
    v = np.zeros((size, size, size), dtype=np.float32)
    g_x = [max(0, -min_p[0]), min(max_p[0], size) - max(0, min_p[0]) + max(0, -min_p[0])]
    g_y = [max(0, -min_p[1]), min(max_p[1], size) - max(0, min_p[1]) + max(0, -min_p[1])]
    g_z = [max(0, -min_p[2]), min(max_p[2], size) - max(0, min_p[2]) + max(0, -min_p[2])]
    v_x = [max(0, min_p[0]), min(max_p[0], size)]
    v_y = [max(0, min_p[1]), min(max_p[1], size)]
    v_z = [max(0, min_p[2]), min(max_p[2], size)]
    v[v_x[0]:v_x[1], v_y[0]:v_y[1], v_z[0]:v_z[1]] = g[g_x[0]:g_x[1], g_y[0]:g_y[1], g_z[0]:g_z[1]]
    return v


def generate_gaussian3D(size):
    s = -(size - 1) / 2
    e = (size - 1) / 2
    a = np.linspace(s, e, size)
    x, y, z = np.meshgrid(a, a, a, indexing='ij')
    d = np.sqrt(x * x + y * y + z * z)
    sigma, mu = 1.5, 0.0
    g = np.exp(-((d - mu) ** 2 / (2.0 * sigma ** 2)))
    return g


def generate_gaussian(size):
    s = -(size - 1) / 2
    e = (size - 1) / 2
    a = np.linspace(s, e, size)
    x, y = np.meshgrid(a, a)
    d = np.sqrt(x * x + y * y)
    sigma, mu = 1.3, 0.0
    g = np.exp(-((d - mu) ** 2 / (2.0 * sigma ** 2)))
    return g
